{"version":3,"sources":["Components/Firebase.js","Components/Auth/sign.js","Components/Delete/Delete.js","Components/modal/comment.js","Components/TodoItems/todoItems.js","Components/FilterElements/FilterElements.js","Components/AddItems/addItems.js","Components/modal/modal.js","App.js","Components/logedin/loggedin.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Sign","ThemeProvider","CSSReset","Flex","w","mx","mt","as","onSubmit","this","handelSave","flexDirection","Input","mb","type","placeholder","id","Button","variantColor","onClick","hsndelSignin","backgroundColor","size","color","borderRadius","width","alignItems","px","justifyContent","fontSize","fontWeight","height","m","className","Component","Delete","props","deleteItem","React","useState","isOpen","setIsOpen","onClose","cancelRef","useRef","IconButton","h","p","icon","AlertDialog","leastDestructiveRef","ref","ml","Comment","name","comments","handelChange","DeleteComment","itemKey","comment","handeledit","load","drawer","console","log","onOpen","side","document","getElementById","dr","getElementsByClassName","i","length","style","display","bg","py","border","borderRight","borderTop","borderColor","_hover","Box","pos","zIndex","right","top","d","overflow","e","stopPropagation","Text","textAlign","Set","map","key","Math","random","borderBottom","pb","Editable","defaultValue","minWidth","indexOf","FormControl","Textarea","onChange","value","isLoading","TodoItems","firestore","collection","index","splice","doc","update","then","setState","state","target","alert","push","items","handelDateSort","handelNameSort","itemDone","handlefilter","ListItems","item","done","task","date","time","tags","tag","Tag","href","assignTo","textAlgin","FilterElements","filter","filterSearch","ListTags","allTags","label","options","isMulti","mr","AddItems","preventDefault","addItem","AddModal","useDisclosure","initialRef","finalRef","Modal","initialFocusRef","finalFocusRef","Heading","App","auth","checkUser","onAuthStateChanged","user","handelLagout","signOut","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.469d965c.chunk.js","sourcesContent":["\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCF3fyTJkdvIG9ne8V7KCCNIF9M9XjYLXg\",\r\n    authDomain: \"todo-2612d.firebaseapp.com\",\r\n    databaseURL: \"https://todo-2612d.firebaseio.com\",\r\n    projectId: \"todo-2612d\",\r\n    storageBucket: \"todo-2612d.appspot.com\",\r\n    messagingSenderId: \"386250605586\",\r\n    appId: \"1:386250605586:web:643807c61b0c73fa2d04cb\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react';\r\nimport { ThemeProvider, CSSReset, Flex, Input, Button } from \"@chakra-ui/core\";\r\nimport firebase from '../Firebase'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n\r\n\r\nexport class Sign extends Component {\r\n\r\n    // auth = firebase.auth()\r\n    // provider = new firebase.auth.FacebookAuthProvider();\r\n    // hsndelSignin = () => {\r\n    //     this.auth.signInWithPopup(this.provider).then(function (result) {\r\n    //         var user = result.user;\r\n    //         console.log(user)\r\n    //     })\r\n    // }\r\n\r\n    // state = {\r\n    //     email: \"\",\r\n    //     password: \"\"\r\n    // }\r\n    // handelChange = (e) => {\r\n    //     this.setState({\r\n    //         [e.target.id]: e.target.value\r\n    //     })\r\n\r\n    // }\r\n    // handelSave = (e) => {\r\n    //     e.preventDefault();\r\n    //     if (this.state.email === \"\" || this.state.password === \"\") {\r\n    //         alert(\"Fill The Data \")\r\n    //     } else {\r\n    //         this.auth.signInWithEmailAndPassword(this.state.email, this.state.password).then((cred) => {\r\n    //             this.setState({\r\n    //                 email: \"\",\r\n    //                 password: \"\"\r\n    //             })\r\n    //         });\r\n    //     }\r\n\r\n    // }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <ThemeProvider>\r\n                <CSSReset />\r\n\r\n                <Flex w=\"350px\" mx=\"auto\" mt=\"150px\" as=\"form\" onSubmit={this.handelSave} flexDirection=\"column\">\r\n                    <Input mb=\"15px\" type=\"text\" placeholder=\"Enter Email ....\" id=\"email\" />\r\n                    <Input mb=\"15px\" type=\"password\" placeholder=\"Enter Password ....\" id=\"password\" />\r\n                    <Button w=\"150px\" variantColor=\"blue\" type=\"submit\" mx=\"auto\">Login</Button>\r\n                </Flex>\r\n\r\n                <Flex as=\"button\"\r\n                    onClick={this.hsndelSignin}\r\n                    backgroundColor=\"#3b5998\"\r\n                    size=\"lg\" color=\"#fff\"\r\n                    borderRadius=\"60px\"\r\n                    width=\"250px\"\r\n                    alignItems=\"center\"\r\n                    px=\"35px\"\r\n                    justifyContent=\"space-between\"\r\n                    fontSize=\"25px\"\r\n                    fontWeight=\"bold\"\r\n                    height=\"50px\"\r\n                    m=\"auto\"\r\n                    mt=\"50px\"\r\n                >\r\n                    Signin With <i className=\"fa fa-facebook-square\" fontSize=\"25px\"></i>\r\n                </Flex>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sign;\r\n","import React from 'react';\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n    IconButton,\r\n    Button\r\n} from \"@chakra-ui/core\";\r\n\r\nfunction Delete(props) {\r\n    const { id, deleteItem } = props;\r\n    const [isOpen, setIsOpen] = React.useState();\r\n    const onClose = () => setIsOpen(false);\r\n    const cancelRef = React.useRef();\r\n\r\n\r\n    return (\r\n        <>\r\n            <IconButton w=\"45px\" h=\"45px\" p=\"0\" icon=\"close\" size=\"lg\" fontSize=\"20px\" variantColor=\"red\" onClick={() => setIsOpen(true)} />\r\n\r\n            <AlertDialog\r\n                isOpen={isOpen}\r\n                leastDestructiveRef={cancelRef}\r\n                onClose={onClose}\r\n            >\r\n                <AlertDialogOverlay />\r\n                <AlertDialogContent>\r\n                    <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                        Delete Customer\r\n            </AlertDialogHeader>\r\n\r\n                    <AlertDialogBody>\r\n                        Are you sure? You can't undo this action afterwards.\r\n            </AlertDialogBody>\r\n\r\n                    <AlertDialogFooter>\r\n                        <Button ref={cancelRef} onClick={onClose}>\r\n                            Cancel\r\n              </Button>\r\n                        <Button variantColor=\"red\" onClick={() => deleteItem(id)} ml={3}>\r\n                            Delete\r\n              </Button>\r\n                    </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n            </AlertDialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Delete;\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n    Button,\r\n    Box,\r\n    FormControl,\r\n    Textarea,\r\n    Flex,\r\n    IconButton,\r\n    Editable, EditableInput, EditablePreview, Text\r\n} from \"@chakra-ui/core\";\r\n\r\n\r\nfunction Comment(props) {\r\n    const { name, comments, handelChange, DeleteComment, itemKey, handelSave, comment, handeledit, load } = props;\r\n    let drawer = false;\r\n    console.log(load);\r\n\r\n\r\n\r\n    const onOpen = () => {\r\n        let side = document.getElementById(itemKey);\r\n        let dr = document.getElementsByClassName(\"drawer\")\r\n        // let overlay = document.getElementById(\"overlay\");\r\n\r\n        if (!drawer) {\r\n            // overlay.style.display = \"block\";\r\n            side.style.display = \"block\";\r\n            drawer = true\r\n        } else {\r\n            // overlay.style.display = \"none\";\r\n            for (let i = 0; i < dr.length; i++) {\r\n                dr[i].style.display = \"none\";\r\n            }\r\n            drawer = false\r\n        }\r\n\r\n    }\r\n    const ondefault = (e) => {\r\n        e.stopPropagation()\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Button\r\n                onClick={onOpen}\r\n                bg=\"transparent\"\r\n                py=\"7px\" border=\"1px\"\r\n                borderRight=\"0\"\r\n                borderTop=\"0\"\r\n                borderColor=\"gray.200\"\r\n                w=\"20%\" h=\"50px\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                className=\"task\"\r\n                _hover={{ bg: \"transparent\" }}\r\n            >\r\n\r\n                {name}\r\n\r\n            </Button>\r\n            <Box pos=\"fixed\" w=\"100%\" zIndex={1} right=\"0\" top=\"0\" h=\"100%\" bg=\"#0000004d\" d=\"none\" id={itemKey} className=\"drawer\" onClick={onOpen}>\r\n                <Box pos=\"fixed\" w=\"300px\" zIndex={2} right=\"0\" top=\"0\" h=\"100%\" bg=\"#fff\" py=\"25px\" overflow=\"hidden\" onClick={ondefault}>\r\n                    <Text mb=\"50px\" mx=\"auto\" textAlign=\"center\" fontSize=\"2xl\"> {name}</Text>\r\n\r\n                    {\r\n                        [...new Set(comments)].map(comment => {\r\n                            return (\r\n                                <Flex key={Math.random()} borderBottom=\"1px solid #eee\" mb=\"7px\" pb=\"5px\" justifyContent=\"space-between\" w=\"250px\" mx=\"auto\">\r\n                                    <Editable defaultValue={comment} onSubmit={(e) => handeledit(e, comments, itemKey, comment)}>\r\n                                        <EditablePreview />\r\n                                        <EditableInput />\r\n                                    </Editable>\r\n                                    <IconButton minWidth=\"25px\" h=\"25px\" variantColor=\"red\"\r\n                                        icon=\"delete\"\r\n                                        color=\"#fff\"\r\n                                        id={itemKey}\r\n                                        type=\"button\"\r\n                                        onClick={() => DeleteComment(itemKey, comments, comments.indexOf(comment))}>\r\n                                    </IconButton>\r\n                                </Flex>\r\n                            )\r\n                        })\r\n                    }\r\n                    <FormControl mt={4} as=\"form\" w=\"250px\" mx=\"auto\" >\r\n                        <Textarea placeholder=\"Add Comment....\" onChange={handelChange} id=\"comment\" value={comment} />\r\n                        <Button mt={1} variantColor=\"green\"\r\n                            type=\"button\"\r\n\r\n                            {...(!load && { isLoading: true })}\r\n                            onClick={() => handelSave(comments, itemKey)}>ADD</Button>\r\n                    </FormControl>\r\n                </Box>\r\n            </Box>\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Comment;","import React, { Component } from 'react';\r\nimport Delete from '../Delete/Delete';\r\nimport Comment from \"../modal/comment\"\r\nimport { Flex, IconButton, Tag } from \"@chakra-ui/core\";\r\nimport firebase from \"../Firebase\"\r\n\r\nclass TodoItems extends Component {\r\n    ref = firebase.firestore().collection('tasks');\r\n    DeleteComment = (id, comments, index) => {\r\n        comments.splice(index, 1);\r\n        this.ref.doc(id).update({\r\n            comments: comments\r\n        }).then(() => {\r\n            this.setState({\r\n                comment: \"\"\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n\r\n    state = {\r\n        comment: \"\",\r\n        load: true\r\n    }\r\n\r\n    handelChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handelSave = (comments, id) => {\r\n\r\n        if (this.state.comment === \"\") {\r\n            alert(\"Add comment\")\r\n        } else {\r\n            this.setState({\r\n                load: false\r\n            })\r\n            comments.push(this.state.comment)\r\n\r\n            this.ref.doc(id).update({\r\n                comments: comments\r\n            }).then(() => {\r\n                this.setState({\r\n                    comment: \"\",\r\n                    load: true\r\n                })\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    handeledit = (e, comments, id, comment) => {\r\n        //comments.push(e)\r\n        let i = comments.indexOf(comment)\r\n        comments.splice(i, 1);\r\n        comments.push(e);\r\n        this.ref.doc(id).update({\r\n            comments: comments\r\n        }).then(() => {\r\n            this.setState({\r\n                comment: \"\"\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { items, handelDateSort, handelNameSort, itemDone, handlefilter } = this.props;\r\n        let count = items.length\r\n        let ListItems = count ? (\r\n            items.map(item => {\r\n                return (\r\n\r\n                    <Flex fontSize=\"lg\" fontWeight=\"medium\" key={item.key} className={item.done ? \"done\" : \"undone\"}>\r\n\r\n                        {/* <Flex py=\"7px\" border=\"1px\" borderRight=\"0\" borderTop=\"0\" borderColor=\"gray.200\" w=\"20%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"task\">{item.task}</Flex> */}\r\n                        <Comment\r\n                            name={item.task}\r\n                            comment={this.state.comment}\r\n                            load={this.state.load}\r\n                            comments={item.comments}\r\n                            itemKey={item.key}\r\n                            handelChange={this.handelChange}\r\n                            handeledit={this.handeledit}\r\n                            DeleteComment={this.DeleteComment}\r\n                            handelSave={this.handelSave} />\r\n                        <Flex py=\"7px\" border=\"1px\" borderRight=\"0\" borderTop=\"0\" borderColor=\"gray.200\" w=\"10%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"date\">{item.date}</Flex>\r\n                        <Flex py=\"7px\" border=\"1px\" borderRight=\"0\" borderTop=\"0\" borderColor=\"gray.200\" w=\"10%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"time\">{item.time}</Flex>\r\n                        <Flex py=\"7px\" border=\"1px\" borderRight=\"0\" borderTop=\"0\" borderColor=\"gray.200\" w=\"20%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"tags\" id=\"tags\">\r\n                            {\r\n                                [...new Set(item.tags)].map(tag => {\r\n                                    return (\r\n                                        <Tag as=\"a\" onClick={handlefilter} href=\"#!\" key={Math.random()} ml=\"5px\">#{tag}</Tag>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Flex>\r\n                        <Flex py=\"7px\" border=\"1px\" borderRight=\"0\" borderTop=\"0\" borderColor=\"gray.200\" w=\"30%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"time\">{item.assignTo}</Flex>\r\n                        <Flex py=\"7px\" border=\"1px\" borderTop=\"0\" borderColor=\"gray.200\" w=\"10%\" h=\"50px\" alignItems=\"center\" justifyContent=\"space-around\">\r\n                            <IconButton size=\"lg\" fontSize=\"20px\" w=\"45px\" h=\"45px\" variantColor=\"green\" icon=\"check\" onClick={() => itemDone(item.key)} />\r\n                            {/* <span className=\"action icon\" onClick={() => itemDone(item.id)}><i className=\"fa fa-check\"></i></span> */}\r\n                            <Delete id={item.key} items={items} deleteItem={this.props.deleteItem} />\r\n                        </Flex>\r\n                    </Flex>\r\n\r\n                )\r\n            })\r\n        ) : (\r\n                <Flex textAlgin=\"center\" alignItems=\"center\" justifyContent=\"space-around\" color=\"#e53e3e\" fontSize=\"20px\" fontWeight=\"bold\"> There is No Tasks To Show </Flex>\r\n            )\r\n        return (\r\n\r\n            <div className=\"ListItems\">\r\n\r\n                <Flex fontSize=\"xl\" fontWeight=\"bold\">\r\n                    <Flex border=\"1px\" borderRight=\"0\" borderColor=\"gray.200\" w=\"20%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"task title\" onClick={handelNameSort}>Task</Flex>\r\n                    <Flex border=\"1px\" borderRight=\"0\" borderColor=\"gray.200\" w=\"10%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"date title\" onClick={handelDateSort} > Date </Flex>\r\n                    <Flex border=\"1px\" borderRight=\"0\" borderColor=\"gray.200\" w=\"10%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"time title\">Time</Flex>\r\n                    <Flex border=\"1px\" borderRight=\"0\" borderColor=\"gray.200\" w=\"20%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"tags title\" id=\"tags\">Tags</Flex>\r\n                    <Flex border=\"1px\" borderRight=\"0\" borderColor=\"gray.200\" w=\"30%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"tags title\" id=\"tags\">Assign To</Flex>\r\n                    <Flex border=\"1px\" borderColor=\"gray.200\" w=\"10%\" h=\"50px\" alignItems=\"center\" justifyContent=\"center\" className=\"action title\">Action</Flex>\r\n                </Flex>\r\n                {ListItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItems;\r\n","import React from 'react';\r\nimport { ThemeProvider, CSSReset, Button, Flex } from \"@chakra-ui/core\";\r\nimport Select from 'react-select'\r\n\r\nconst FilterElements = (props) => {\r\n    const { filter, filterSearch, allTags } = props;\r\n    let ListTags = allTags.map((label) => {\r\n        // console.log(label)\r\n        return (\r\n            { label: label, value: \"tag\" }\r\n        )\r\n    });\r\n\r\n    // let handleChange = (e) => {\r\n    //     console.log(e.label);\r\n    // };\r\n\r\n    return (\r\n        <ThemeProvider>\r\n            <CSSReset />\r\n\r\n            <Flex alignItems=\"center\" mb=\"25px\" justifyContent=\"space-between\" className=\"filters-cont\">\r\n                <Flex as=\"form\">\r\n                    <Select options={ListTags} id=\"select\" className=\"filterInput\" onChange={filterSearch} isMulti placeholder=\"tags\" />\r\n                </Flex>\r\n                <Flex className=\"filters\">\r\n                    <Button as=\"button\" px=\"20px\" mr=\"15px\" h=\"40px\" fontSize=\"18px\" variantColor=\"green\" id=\"all\" onClick={filter} >All</Button>\r\n                    <Button as=\"button\" px=\"20px\" mr=\"15px\" h=\"40px\" fontSize=\"18px\" variantColor=\"green\" id=\"done\" onClick={filter} >done</Button>\r\n                    <Button as=\"button\" px=\"20px\" h=\"40px\" fontSize=\"18px\" variantColor=\"green\" id=\"undone\" onClick={filter} >undone</Button>\r\n                </Flex>\r\n            </Flex>\r\n\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default FilterElements;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    ThemeProvider,\r\n    CSSReset,\r\n    Box,\r\n    Input,\r\n    Flex,\r\n    Button\r\n} from \"@chakra-ui/core\";\r\n\r\n\r\nexport class AddItems extends Component {\r\n    state = {\r\n        task: \"\",\r\n        date: \"\",\r\n        time: \"\",\r\n        tags: [],\r\n        done: false,\r\n        assignTo: \"\",\r\n        comments: \"\"\r\n    }\r\n    handelChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n\r\n    }\r\n    handelSave = (e) => {\r\n        e.preventDefault();\r\n        //console.log(unique);\r\n        if (this.state.task === \"\" || this.state.date === \"\") {\r\n            alert(\"Fill The Data \")\r\n        } else {\r\n            this.props.addItem(this.state)\r\n            this.setState({\r\n                task: \"\",\r\n                date: \"\",\r\n                time: \"\",\r\n                tags: [],\r\n                done: false,\r\n                assignTo: \"\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ThemeProvider>\r\n                <CSSReset />\r\n                <Box mt=\"25px\" mx=\"auto\" textAlign=\"center\">\r\n                    <Flex as=\"form\" onSubmit={this.handelSave} flexDirection=\"column\">\r\n                        <Input mb=\"15px\" type=\"text\" placeholder=\"Enter Task ....\" id=\"task\" onChange={this.handelChange} value={this.state.task} />\r\n                        <Input mb=\"15px\" type=\"date\" placeholder=\"Enter Date ....\" id=\"date\" onChange={this.handelChange} value={this.state.date} />\r\n                        <Input mb=\"15px\" type=\"time\" placeholder=\"Enter time ....\" id=\"time\" onChange={this.handelChange} value={this.state.time} />\r\n                        <Input mb=\"15px\" as=\"input\" type=\"text\" placeholder=\"Enter tags ....\" id=\"tags\" onChange={this.handelChange} value={this.state.tags} />\r\n                        <Input mb=\"15px\" as=\"input\" type=\"text\" placeholder=\"Enter user Name ....\" id=\"assignTo\" onChange={this.handelChange} />\r\n                        <Button w=\"150px\" variantColor=\"blue\" type=\"submit\" mx=\"auto\">Add</Button>\r\n                    </Flex>\r\n                </Box>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddItems;\r\n","import React from 'react';\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    useDisclosure,\r\n    Heading\r\n} from \"@chakra-ui/core\";\r\nimport AddItems from '../AddItems/addItems';\r\n\r\nfunction AddModal(props) {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const { addItem } = props;\r\n    const initialRef = React.useRef();\r\n    const finalRef = React.useRef();\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={onOpen} w=\"150px\" variantColor=\"blue\" h=\"40px\" fontSize=\"18px\">Add Task</Button>\r\n\r\n\r\n            <Modal\r\n                initialFocusRef={initialRef}\r\n                finalFocusRef={finalRef}\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n            >\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader><Heading mt=\"25px\" className=\"text-center\" textAlign=\"center\">Add Item</Heading></ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody pb={6}>\r\n                        <AddItems addItem={addItem} />\r\n                    </ModalBody>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\nexport default AddModal;","import React, { Component } from 'react';\nimport './App.css'\nimport Sign from './Components/Auth/sign';\nimport Loggedin from './Components/logedin/loggedin';\nimport firebase from './Components/Firebase'\nimport Nav from './Components/nav';\nimport { Route, BrowserRouter } from 'react-router-dom';\n//import { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\n\n\nclass App extends Component {\n  ///////////////////////////////////////////////////////\n  auth = firebase.auth()\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      user: null\n    }\n  }\n\n  checkUser = () => {\n    this.auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user })\n      } else {\n        this.setState({ user })\n      }\n    })\n  }\n  componentDidMount() {\n    this.checkUser();\n  }\n  handelLagout = () => {\n    firebase.auth().signOut().then(function () {\n      this.checkUser();\n    }).catch(function (error) {\n      // An error happened.\n    });\n  }\n  render() {\n    // let uploader = this.state.user ?\n    //   <Route exact path=\"/\" component={Loggedin} /> : <Route exact path=\"/\" component={Sign} />\n\n    return (\n      <>\n        {/* <Nav user={this.state.user} handelLagout={this.handelLagout} />\n        <BrowserRouter>\n          {uploader}\n\n        </BrowserRouter> */}\n        <Sign />\n      </>\n    );\n\n  }\n}\n\n\nexport default App;\n\n","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport TodoItems from '../TodoItems/todoItems';\r\nimport FilterElements from '../FilterElements/FilterElements';\r\nimport firebase from '../Firebase'\r\nimport { ThemeProvider, CSSReset, Box, Heading, Flex } from \"@chakra-ui/core\";\r\nimport AddModal from '../modal/modal';\r\n\r\n\r\nclass Loggedin extends Component {\r\n\r\n    ref = firebase.firestore().collection('tasks');\r\n    auth = firebase.auth()\r\n    unsubscribe = null;\r\n    state = {\r\n        items: [],\r\n        allTags: []\r\n    }\r\n    ///////////\r\n    onCollectionUpdate = (querySnapshot) => {\r\n        let items = [];\r\n        let allTags = [];\r\n\r\n        querySnapshot.forEach((doc) => {\r\n            this.auth.onAuthStateChanged((user) => {\r\n                const { task, date, time, done, assignTo, comments, tags } = doc.data();\r\n                //join table\r\n                items.push({\r\n                    key: doc.id,\r\n                    doc, // DocumentSnapshot\r\n                    task,\r\n                    date,\r\n                    time,\r\n                    done,\r\n                    assignTo,\r\n                    comments,\r\n                    tags\r\n                });\r\n                allTags.push(...tags);\r\n                allTags = _.uniq(allTags);\r\n                this.setState({ items })\r\n                this.setState({ allTags })\r\n                // console.log(items)\r\n            })\r\n        });\r\n\r\n    }\r\n    ///////////\r\n    componentDidMount() {\r\n        this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\r\n    }\r\n    ///////////\r\n    previousState = () => {\r\n        this.ref = firebase.firestore().collection('tasks');\r\n        let items = this.ref.onSnapshot(this.onCollectionUpdate);\r\n        this.setState({ items })\r\n    }\r\n    ///////////\r\n    deleteItem = (id) => {\r\n        this.ref.doc(id).delete();\r\n        this.previousState()\r\n    }\r\n    ///////////\r\n    itemDone = (id) => {\r\n        this.ref.get().then((snapshot) => {\r\n            snapshot.forEach(doc => {\r\n                if (doc.id === id && doc.data().done === true) {\r\n                    this.ref.doc(id).update({ done: false })\r\n                } else if (doc.id === id && doc.data().done === false) {\r\n                    this.ref.doc(id).update({ done: true })\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ///////////\r\n    handelDateSort = () => {\r\n        let items = _.sortBy(this.state.items, ['date']);\r\n        this.setState({ items })\r\n    }\r\n    ///////////\r\n    handelNameSort = () => {\r\n        let items = _.sortBy(this.state.items, ['task']);\r\n        this.setState({ items })\r\n    }\r\n    ///////////\r\n    addItem = (item) => {\r\n        let tags = item.tags.split(', '); // split string on comma space\r\n\r\n        this.auth.onAuthStateChanged((user) => {\r\n            this.ref.add({\r\n                task: item.task,\r\n                date: item.date,\r\n                time: item.time,\r\n                done: item.done,\r\n                assignTo: item.assignTo,\r\n                tags: tags\r\n            });\r\n        })\r\n    }\r\n    ///////////\r\n    loop = (key, val) => {\r\n        this.ref = firebase.firestore().collection('tasks').where(key, '==', val);\r\n        let items = this.ref.onSnapshot(this.onCollectionUpdate);\r\n        this.setState({ items })\r\n    }\r\n    ///////////\r\n    filter = (e) => {\r\n        let targetId = e.target.id;\r\n        switch (targetId) {\r\n            case \"all\":\r\n                this.previousState();\r\n                break;\r\n            case \"done\":\r\n                this.loop('done', true)\r\n                break;\r\n            case \"undone\":\r\n                this.loop('done', false)\r\n                break;\r\n            default:\r\n                return 1;\r\n        }\r\n    }\r\n    ///////////\r\n    handlefilter = (e) => {\r\n        let tag_name = e.target.text.substring(1);\r\n        this.ref = firebase.firestore().collection('tasks').where('tags', 'array-contains', tag_name);\r\n        let items = this.ref.onSnapshot(this.onCollectionUpdate);\r\n        this.setState({ items })\r\n    }\r\n    ///////////\r\n    filterSearch = (e) => {\r\n        if (e != null) {\r\n            let x = _.map(e, 'label');\r\n\r\n            this.ref = firebase.firestore().collection('tasks').where('tags', 'array-contains-any', x);\r\n            let items = this.ref.onSnapshot(this.onCollectionUpdate);\r\n            this.setState({ items })\r\n        } else {\r\n            this.previousState();\r\n        }\r\n    }\r\n    ///////////////////////////////////////////////////////\r\n    render() {\r\n        return (\r\n            <ThemeProvider>\r\n                <CSSReset />\r\n                <Box w=\"90%\" mx=\"auto\" >\r\n                    {/* <Heading mt=\"25px\" className=\"text-center\" textAlign=\"center\">Add Item</Heading>\r\n                    <Box className=\"content\">\r\n                        <AddItems addItem={this.addItem} />\r\n                    </Box> */}\r\n\r\n\r\n                    <Box className=\"content\">\r\n                        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"50px\" mt=\"25px\">\r\n                            <Heading className=\"text-center\" textAlign=\"center\">Todo List</Heading>\r\n                            <AddModal addItem={this.addItem} />\r\n                        </Flex>\r\n                        <FilterElements filter={this.filter} filterSearch={this.filterSearch} allTags={this.state.allTags} />\r\n                        <TodoItems items={this.state.items} handlefilter={this.handlefilter} deleteItem={this.deleteItem} itemDone={this.itemDone} handelDateSort={this.handelDateSort} handelNameSort={this.handelNameSort} />\r\n                    </Box>\r\n                </Box>\r\n            </ThemeProvider>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Loggedin;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}